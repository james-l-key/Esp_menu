<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="d1/dbe/temp_8py" kind="file" language="Python">
    <compoundname>temp.py</compoundname>
    <innernamespace refid="d5/d23/namespacetemp">temp</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="d5/d23/namespacetemp" refkind="compound"><highlight class="comment">#Esp_menu<sp/>/<sp/>generate_menu_header.py</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>json</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d5/d23/namespacetemp_1a35f6472636944b16d9e446f41999e5ef" kindref="member">generate_menu_header</ref>(json_file_arg,<sp/>header_file_arg):</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(json_file_arg):</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&quot;Error:<sp/>JSON<sp/>file<sp/>&apos;{json_file_arg}&apos;<sp/>does<sp/>not<sp/>exist.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dir<sp/>=<sp/>os.path.dirname(header_file_arg)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>output_dir:</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.makedirs(output_dir,<sp/>exist_ok=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dir<sp/>=<sp/>os.path.dirname(header_file_arg)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>output_dir:</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.makedirs(output_dir,<sp/>exist_ok=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(json_file_arg,<sp/></highlight><highlight class="stringliteral">&apos;r&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>f:</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>json.load(f)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;JSON<sp/>data<sp/>loaded<sp/>successfully.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>(json.JSONDecodeError,<sp/>FileNotFoundError)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&quot;Error<sp/>loading<sp/>JSON:<sp/>{e}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.exit(1)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">#--<sp/>-<sp/>Generate<sp/>Header<sp/>Files<sp/>--<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">headers_data<sp/>=<sp/>data.get(</highlight><highlight class="stringliteral">&quot;headers&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>header_def<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>headers_data:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>header_name<sp/>=<sp/>header_def.get(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>header_name:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header_path<sp/>=<sp/>os.path.join(output_dir,<sp/>header_name)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(header_path,<sp/></highlight><highlight class="stringliteral">&apos;w&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>hf:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hf.write(f</highlight><highlight class="stringliteral">&apos;//<sp/>Auto-generated<sp/>header:<sp/>{header_name}\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hf.write(f</highlight><highlight class="stringliteral">&apos;#ifndef<sp/>{header_name.upper().replace(&quot;.&quot;,<sp/>&quot;_&quot;)}\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hf.write(f</highlight><highlight class="stringliteral">&apos;#define<sp/>{header_name.upper().replace(&quot;.&quot;,<sp/>&quot;_&quot;)}\n\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>include<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>header_def.get(</highlight><highlight class="stringliteral">&quot;includes&quot;</highlight><highlight class="normal">,<sp/>[]):</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hf.write(f</highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;{include}&quot;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hf.write(</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>declaration<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>header_def.get(</highlight><highlight class="stringliteral">&quot;declarations&quot;</highlight><highlight class="normal">,<sp/>[]):</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hf.write(f</highlight><highlight class="stringliteral">&apos;{declaration}\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hf.write(</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hf.write(f</highlight><highlight class="stringliteral">&apos;#ifndef<sp/>{header_name.upper().replace(&quot;.&quot;,<sp/>&quot;_&quot;)}\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">print(f</highlight><highlight class="stringliteral">&quot;Generated<sp/>header<sp/>file:<sp/>{header_path}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">#--<sp/>-<sp/>Generate<sp/>Function<sp/>Implementations<sp/>--<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">functions_data<sp/>=<sp/>data.get(</highlight><highlight class="stringliteral">&quot;functions&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>functions_data:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_source_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;generated_functions.c&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#You<sp/>might<sp/>want<sp/>to<sp/>make<sp/>this<sp/>configurable<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>functions_source_path<sp/>=<sp/>os.path.join(output_dir,<sp/>functions_source_name)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(functions_source_path,<sp/></highlight><highlight class="stringliteral">&apos;w&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>sf:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf.write(f</highlight><highlight class="stringliteral">&apos;//<sp/>Auto-generated<sp/>functions\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#Include<sp/>the<sp/>generated<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>header_def<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>headers_data:</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf.write(f</highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;{header_def.get(&quot;name&quot;)}&quot;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf.write(</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>func_def<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>functions_data:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>func_def.get(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/>=<sp/>func_def.get(</highlight><highlight class="stringliteral">&quot;return_type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params<sp/>=<sp/>func_def.get(</highlight><highlight class="stringliteral">&quot;parameters&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>func_def.get(</highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">.join([f<sp/></highlight><highlight class="stringliteral">&apos;{p[&quot;type&quot;]}<sp/>{p[&quot;name&quot;]}&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>p<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>params])</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf.write(f</highlight><highlight class="stringliteral">&apos;{return_type}<sp/>{name}({params_str})<sp/>{{\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>body:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf.write(f</highlight><highlight class="stringliteral">&apos;<sp/><sp/><sp/><sp/>{line}\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf.write(</highlight><highlight class="stringliteral">&apos;}\n\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">print(f</highlight><highlight class="stringliteral">&quot;Generated<sp/>functions<sp/>source<sp/>file:<sp/>{functions_source_path}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">#--<sp/>-<sp/>Generate<sp/>Menu<sp/>Data<sp/>Header<sp/>--<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">menu_header_file<sp/>=<sp/>os.path.join(output_dir,<sp/></highlight><highlight class="stringliteral">&quot;menu_data.h&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#Ensure<sp/>it<sp/>goes<sp/>to<sp/>the<sp/>same<sp/>output<sp/>dir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(menu_header_file,<sp/></highlight><highlight class="stringliteral">&apos;w&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>h_menu_data:</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>h_menu_data.write(</highlight><highlight class="stringliteral">&apos;//<sp/>Auto-generated<sp/>by<sp/>generate_menu_header.py.<sp/>DO<sp/>NOT<sp/>EDIT.\n\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>h_menu_data.write(</highlight><highlight class="stringliteral">&apos;#ifndef<sp/>MENU_DATA_H\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>h_menu_data.write(</highlight><highlight class="stringliteral">&apos;#define<sp/>MENU_DATA_H\n\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>h_menu_data.write(</highlight><highlight class="stringliteral">&apos;#include<sp/>&lt;stdint.h&gt;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">#...(rest<sp/>of<sp/>your<sp/>menu<sp/>data<sp/>generation<sp/>logic,<sp/>writing<sp/>to<sp/>h_menu_data)...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>h_menu_data.write(</highlight><highlight class="stringliteral">&apos;#endif<sp/>//<sp/>MENU_DATA_H\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">print(f</highlight><highlight class="stringliteral">&quot;Header<sp/>file<sp/>&apos;{menu_header_file}&apos;<sp/>generated<sp/>successfully.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">#--<sp/>-<sp/>Generate<sp/>Graphics<sp/>Drawing<sp/>Function<sp/>Call<sp/>Header<sp/>--<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">graphics_header_file<sp/>=<sp/>os.path.join(output_dir,<sp/></highlight><highlight class="stringliteral">&quot;menu_graphics.h&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(graphics_header_file,<sp/></highlight><highlight class="stringliteral">&apos;w&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>h_graphics:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>h_graphics.write(</highlight><highlight class="stringliteral">&apos;//<sp/>Auto-generated<sp/>graphics<sp/>function<sp/>calls\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>h_graphics.write(</highlight><highlight class="stringliteral">&apos;#ifndef<sp/>MENU_GRAPHICS_H\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>h_graphics.write(</highlight><highlight class="stringliteral">&apos;#define<sp/>MENU_GRAPHICS_H\n\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>h_graphics.write(</highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;generated_graphics.h&quot;\n\n&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#Include<sp/>the<sp/>header<sp/>with<sp/>declarations<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>h_graphics.write(</highlight><highlight class="stringliteral">&apos;void<sp/>draw_menu_graphics(lv_obj_t<sp/>*parent);\n\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>h_graphics.write(</highlight><highlight class="stringliteral">&apos;#endif<sp/>//<sp/>MENU_GRAPHICS_H\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">print(f</highlight><highlight class="stringliteral">&quot;Generated<sp/>graphics<sp/>header<sp/>file:<sp/>{graphics_header_file}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">#--<sp/>-<sp/>Generate<sp/>Graphics<sp/>Drawing<sp/>Function<sp/>Call<sp/>Source<sp/>--<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">graphics_source_file<sp/>=<sp/>os.path.join(output_dir,<sp/></highlight><highlight class="stringliteral">&quot;menu_graphics.c&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(graphics_source_file,<sp/></highlight><highlight class="stringliteral">&apos;w&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>s_graphics:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>s_graphics.write(</highlight><highlight class="stringliteral">&apos;//<sp/>Auto-generated<sp/>graphics<sp/>function<sp/>calls\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>s_graphics.write(</highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;menu_graphics.h&quot;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>s_graphics.write(</highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;generated_graphics.h&quot;\n\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>s_graphics.write(</highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;lvgl.h&quot;\n&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#Make<sp/>sure<sp/>LVGL<sp/>is<sp/>included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>s_graphics.write(</highlight><highlight class="stringliteral">&apos;void<sp/>draw_menu_graphics(lv_obj_t<sp/>*parent)<sp/>{\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>graphics_data<sp/>=<sp/>data.get(</highlight><highlight class="stringliteral">&quot;graphics&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>item<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>graphics_data:</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtype<sp/>=<sp/>item.get(</highlight><highlight class="stringliteral">&quot;subtype&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>=<sp/>item.get(</highlight><highlight class="stringliteral">&quot;position&quot;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>:<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal"><sp/>:<sp/>0<sp/>})</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>item.get(</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal"><sp/>:<sp/>50,<sp/></highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal"><sp/>:<sp/>20<sp/>})<sp/></highlight><highlight class="comment">#Default<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>subtype<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;sine&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_graphics.write(f</highlight><highlight class="stringliteral">&apos;<sp/><sp/><sp/><sp/>draw_sine_wave_custom(parent,<sp/>{position.get(&quot;x&quot;)},<sp/>{position.get(&quot;y&quot;)},<sp/>{size.get(&quot;width&quot;)},<sp/>{size.get(&quot;height&quot;)});\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>subtype<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;saw&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_graphics.write(f</highlight><highlight class="stringliteral">&apos;<sp/><sp/><sp/><sp/>draw_saw_wave_custom(parent,<sp/>{position.get(&quot;x&quot;)},<sp/>{position.get(&quot;y&quot;)},<sp/>{size.get(&quot;width&quot;)},<sp/>{size.get(&quot;height&quot;)});\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#Add<sp/>cases<sp/>for<sp/>other<sp/>waveforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>s_graphics.write(</highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">print(f</highlight><highlight class="stringliteral">&quot;Generated<sp/>graphics<sp/>source<sp/>file:<sp/>{graphics_source_file}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len<sp/>(sys.argv)<sp/>!=<sp/>3<sp/>:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Usage:<sp/>python<sp/>generate_menu_header.py<sp/>&lt;input_json&gt;<sp/>&lt;output_directory&gt;&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#Changed<sp/>to<sp/>output<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;input_json&gt;:<sp/>Path<sp/>to<sp/>the<sp/>menu<sp/>definition<sp/>JSON<sp/>file.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;output_directory&gt;:<sp/>Full<sp/>path<sp/>for<sp/>the<sp/>output<sp/>directory<sp/>to<sp/>generate<sp/>files.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.exit(1)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/d23/namespacetemp_1a35f6472636944b16d9e446f41999e5ef" kindref="member">generate_menu_header</ref>(sys.argv[1],<sp/>sys.argv[2])</highlight></codeline>
    </programlisting>
    <location file="components/Esp_menu/temp.py"/>
  </compounddef>
</doxygen>
