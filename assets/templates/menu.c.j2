#include "menu_data.h"
#include "lvgl.h"
#include "esp_lvgl_port.h"
#include "iot_knob.h"
#include "iot_button.h"
#include "button_types.h"
#include "button_gpio.h"
#include "string.h"
#include "user_graphic.h"

{% for code in graphics_code %}
{{ code }}
{% endfor %}

static void event_handler(lv_event_t *e) {
    lv_obj_t *obj = lv_event_get_target(e);
    lv_event_code_t code = lv_event_get_code(e);
    if (code == LV_EVENT_CLICKED) {
        const char *text = lv_list_get_btn_text(lv_obj_get_parent(obj), obj);
        {% for screen in config.menu.screens %}
        {% for item in screen.items %}
        if (strcmp(text, "{{ item.name }}") == 0) {
            {% if item.type == 'action' and item.callback %}
            {{ item.callback }}();
            {% elif item.type == 'submenu' %}
            lv_scr_load(scr_{{ item.name | replace(" ", "_") | lower }});
            {% endif %}
        }
        {% endfor %}
        {% endfor %}
    }
}

void menu_init(void) {
    // Initialize LVGL port with default configuration
    const lvgl_port_cfg_t lvgl_cfg = ESP_LVGL_PORT_INIT_CONFIG();
    lvgl_port_init(&lvgl_cfg);
    
    // Configure the display
    const lvgl_port_display_cfg_t disp_cfg = {
        .hres = {{ config.display.width }},
        .vres = {{ config.display.height }},
        .flags = {
            .buff_dma = true,
            .buff_spiram = false,
            .sw_rotate = false,
            .swap_bytes = false,
        },
    };
    
    // Add display
    lv_disp_t *disp = lvgl_port_add_disp(&disp_cfg);
    
    // Create and register screens
    lv_obj_t *scr_main = lv_obj_create(NULL);
    {% for screen in config.menu.screens %}
    {% for item in screen.items %}
    {% if item.type == 'submenu' %}
    lv_obj_t *scr_{{ item.name | replace(" ", "_") | lower }} = lv_obj_create(NULL);
    {% endif %}
    {% endfor %}
    {% endfor %}
    
    // Encoder setup
    {% for encoder in config.encoders %}
    knob_config_t knob_cfg = {
        .default_direction = 0,
        .gpio_encoder_a = {{ encoder.pins.A }},
        .gpio_encoder_b = {{ encoder.pins.B }}
    };
    knob_handle_t {{ encoder.name }} = iot_knob_create(&knob_cfg);
    
    button_config_t btn_cfg = {
        .long_press_time = 0,
        .short_press_time = 0,
    };
    
    button_gpio_config_t gpio_btn_cfg = {
        .gpio_num = {{ encoder.pins.switch }},
        .active_level = 0,
        .enable_power_save = false,
        .disable_pull = false,
    };
    
    button_handle_t {{ encoder.name }}_btn = NULL;
    iot_button_new_gpio_device(&btn_cfg, &gpio_btn_cfg, &{{ encoder.name }}_btn);
    
    lvgl_port_encoder_cfg_t encoder_cfg = {
        .disp = disp,
        .encoder_a_b = {{ encoder.name }},
        .encoder_enter = {{ encoder.name }}_btn
    };
    lv_indev_t *indev_{{ encoder.name }} = lvgl_port_add_encoder(&encoder_cfg);
    lv_group_t *group_{{ encoder.name }} = lv_group_create();
    {% endfor %}

    // Menu setup
    {% for screen in config.menu.screens %}
    lv_obj_t *list_{{ screen.name }} = lv_list_create(scr_{{ screen.name }});
    {% for item in screen.items %}
    lv_obj_t *btn_{{ loop.index }} = lv_list_add_btn(list_{{ screen.name }}, NULL, "{{ item.name }}");
    lv_obj_add_event_cb(btn_{{ loop.index }}, event_handler, LV_EVENT_CLICKED, NULL);
    lv_group_add_obj(group_{{ config.encoders[0].name }}, btn_{{ loop.index }});
    {% endfor %}
    lv_indev_set_group(indev_{{ config.encoders[0].name }}, group_{{ config.encoders[0].name }});
    
    {% for item in screen.items %}
    {% if item.type == 'submenu' %}
    lv_obj_t *list_{{ item.name | replace(" ", "_") | lower }} = lv_list_create(scr_{{ item.name | replace(" ", "_") | lower }});
    {% for subitem in item.items %}
    lv_obj_t *subbtn_{{ loop.index }} = lv_list_add_btn(list_{{ item.name | replace(" ", "_") | lower }}, NULL, "{{ subitem.name }}");
    lv_obj_add_event_cb(subbtn_{{ loop.index }}, event_handler, LV_EVENT_CLICKED, NULL);
    lv_group_add_obj(group_{{ config.encoders[0].name }}, subbtn_{{ loop.index }});
    {% endfor %}
    lv_indev_set_group(indev_{{ config.encoders[0].name }}, group_{{ config.encoders[0].name }});
    {% endif %}
    {% endfor %}
    {% endfor %}

    // Load initial screen
    lv_scr_load(scr_main);
}