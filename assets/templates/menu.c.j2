#include "menu_data.h"
#include "lvgl.h"
#include "esp_lvgl_port.h"
#include "iot_knob.h"
#include "iot_button.h"
#include "button_types.h"
#include "button_gpio.h"
#include "string.h"

#include "user_graphic.h"

{% for code in graphics_code %}
{{ code }}
{% endfor %}

static void event_handler(lv_event_t *e) {
    lv_obj_t *obj = lv_event_get_target(e);
    lv_event_code_t code = lv_event_get_code(e);
    if (code == LV_EVENT_CLICKED) {
        // Updated to use correct LVGL API with item parameter
        const char *text = lv_list_get_btn_text(lv_obj_get_parent(obj), obj);
        {% for screen in config.menu.screens %}
        {% for widget in screen.widgets %}
        /* DEBUG: Widget type={{ widget.type }}, items={{ widget['items'] }} */
        {% if widget.type == 'list' and widget['items'] %}
        /* DEBUG: Processing list widget with {{ widget['items'] | length }} items */
        {% for item in widget['items'] %}
        /* DEBUG: Adding item {{ item.text }} */
        if (strcmp(text, "{{ item.text }}") == 0) {
            {% if item.action %}
            {{ item.action }}();
            {% elif item.screen %}
            lv_scr_load(scr_{{ item.screen }});
            {% endif %}
        }
        {% endfor %}
        {% else %}
        /* DEBUG: Skipped widget type={{ widget.type }}, items={{ widget['items'] }} */
        {% endif %}
        {% endfor %}
        {% endfor %}
    }
}

void menu_init(void) {
    // Initialize LVGL port with default configuration
    const lvgl_port_cfg_t lvgl_cfg = ESP_LVGL_PORT_INIT_CONFIG();
    lvgl_port_init(&lvgl_cfg);
    
    // Configure the display
    const lvgl_port_display_cfg_t disp_cfg = {
        .hres = {{ config.display.width }},
        .vres = {{ config.display.height }},
        .flags = {
            .buff_dma = true,              // Use DMA for rendering (if applicable)
            .buff_spiram = false,          // Use SPI RAM buffer if available
            .sw_rotate = false,            // Use software rotation
            .swap_bytes = false,           // Swap RGB565 bytes
        },
    };
    
    // Add display
    lv_disp_t *disp = lvgl_port_add_disp(&disp_cfg);
    
    // Create and register the main screen
    lv_obj_t *scr_main = NULL;
    {% for screen in config.menu.screens %}
    {% if screen.name == 'main' %}
    scr_main = lv_obj_create(NULL);
    {% endif %}
    {% endfor %}
    
    if (!scr_main) {
        scr_main = lv_obj_create(NULL);
    }

    // Encoder setup
    {% for encoder in config.encoders %}
    // Create knob with updated API
    knob_config_t knob_cfg = {
        .default_direction = 0,
        .gpio_encoder_a = {{ encoder.pins.A }},
        .gpio_encoder_b = {{ encoder.pins.B }}
    };
    knob_handle_t {{ encoder.name }} = iot_knob_create(&knob_cfg);
    
    // Create button with updated API for button component v4.x
    button_config_t btn_cfg = {
        .long_press_time = 0,
        .short_press_time = 0,
    };
    
    // Configure GPIO button properties
    button_gpio_config_t gpio_btn_cfg = {
        .gpio_num = {{ encoder.pins.switch }},
        .active_level = 0,
        .enable_power_save = false,
        .disable_pull = false,
    };
    
    // Create button using required parameters for v4.x API
    button_handle_t {{ encoder.name }}_btn = NULL;
    iot_button_new_gpio_device(&btn_cfg, &gpio_btn_cfg, &{{ encoder.name }}_btn);
    
    // Create encoder input device using updated API
    lvgl_port_encoder_cfg_t encoder_cfg = {
        .disp = disp,
        .encoder_a_b = {{ encoder.name }},
        .encoder_enter = {{ encoder.name }}_btn
    };
    lv_indev_t *indev_{{ encoder.name }} = lvgl_port_add_encoder(&encoder_cfg);
    lv_group_t *group_{{ encoder.name }} = lv_group_create();
    {% endfor %}

    // Menu setup
    {% for screen in config.menu.screens %}
    {% if screen.name != 'main' %}
    lv_obj_t *scr_{{ screen.name }} = lv_obj_create(NULL);
    {% endif %}
    {% for widget in screen.widgets %}
    /* DEBUG: Widget type={{ widget.type }}, items={{ widget['items'] }} */
    {% if widget.type == 'list' and widget['items'] %}
    /* DEBUG: Processing list widget with {{ widget['items'] | length }} items */
    lv_obj_t *list_{{ screen.name }}_{{ loop.index }} = lv_list_create(scr_{{ screen.name }});
    {% for item in widget['items'] %}
    /* DEBUG: Adding item {{ item.text }} */
    lv_obj_t *btn = lv_list_add_btn(list_{{ screen.name }}_{{ loop.index }}, NULL, "{{ item.text }}");
    lv_obj_add_event_cb(btn, event_handler, LV_EVENT_CLICKED, NULL);
    {% endfor %}
    lv_group_add_obj(group_{{ widget.controlled_by }}, list_{{ screen.name }}_{{ loop.index }});
    lv_indev_set_group(indev_{{ widget.controlled_by }}, group_{{ widget.controlled_by }});
    {% elif widget.type == 'image' %}
    lv_obj_t *img_{{ screen.name }}_{{ loop.index }} = lv_image_create(scr_{{ screen.name }});
    lv_image_set_src(img_{{ screen.name }}_{{ loop.index }}, &{{ widget.graphic_id }}_dsc);
    lv_obj_set_pos(img_{{ screen.name }}_{{ loop.index }}, {{ widget.x }}, {{ widget.y }});
    {% elif widget.type == 'canvas' %}
    {% set graphic = config.graphics | selectattr('id', 'equalto', widget.graphic_id) | first %}
    lv_obj_t *canvas_{{ screen.name }}_{{ loop.index }} = lv_canvas_create(scr_{{ screen.name }});
    draw_{{ widget.graphic_id }}(canvas_{{ screen.name }}_{{ loop.index }}, {{ widget.width }}, {{ widget.height }}, {{ graphic.params.tile_size if graphic.params is defined and graphic.params.tile_size is defined else 0 }});
    lv_obj_set_pos(canvas_{{ screen.name }}_{{ loop.index }}, {{ widget.x }}, {{ widget.y }});
    {% else %}
    /* DEBUG: Unknown widget type={{ widget.type }} */
    {% endif %}
    {% endfor %}
    {% endfor %}

    // Load initial screen
    lv_scr_load(scr_main);
}